QUARTUS_DIR=$(ROOT)/quartus
QUARTUS_OUTPUT=$(ROOT)/quartus_output
QUARTUS_DB=$(ROOT)/quartus/db
QUARTUS_IDB=$(ROOT)/quartus/incremental_db

QUARTUS=$(ALTERA)/quartus/bin
QUARTUS_SH=SRAMS_DIR=$(SRAM_CONTENTS) RTL_DIR=$(RTL_DIR) VERILOG_DIR=$(VERILOG_DIR) QUARTUS_OUTPUT=$(QUARTUS_OUTPUT) QUARTUS_DIR=$(QUARTUS_DIR) $(QUARTUS)/quartus_sh
QUARTUS_CDB=SRAMS_DIR=$(SRAM_CONTENTS) RTL_DIR=$(RTL_DIR) VERILOG_DIR=$(VERILOG_DIR) QUARTUS_OUTPUT=$(QUARTUS_OUTPUT) QUARTUS_DIR=$(QUARTUS_DIR) $(QUARTUS)/quartus_cdb
QUARTUS_EDA=SRAMS_DIR=$(SRAM_CONTENTS) RTL_DIR=$(RTL_DIR) VERILOG_DIR=$(VERILOG_DIR) QUARTUS_OUTPUT=$(QUARTUS_OUTPUT) QUARTUS_DIR=$(QUARTUS_DIR) $(QUARTUS)/quartus_eda

SYNTH_PROJECT ?= bbc_project

help_synth:
	$H "Makefile.synth contains targets and recipes"
	$H "to enable synthesis, fitting and timing of"
	$H "FPGA builds using Altera Quartus"
	$H ""
	$H "The makefile support different 'project's using the same tree"
	$H "The project name is specified with 'SYNTH_PROJECT'"
	$H "SYNTH_PROJECT defaults to 'bbc_project'"
	$H ""
	$H "The first step is synthesis (mapping):"
	$H "  make SYNTH_PROJECT=<project> synth"
	$H ""
	$H "The second step is fitting:"
	$H "  make SYNTH_PROJECT=<project> fit"
	$H ""
	$H "The third step is timing analysis:"
	$H "  make SYNTH_PROJECT=<project> timing"
	$H ""
	$H "After fitting (or timing, indeed) the SRAM's making an"
	$H "image may be updated with"
	$H "  make SYNTH_PROJECT=<project> fpga_update_srams"
	$H ""
	$H "A resynthesis can be performed with"
	$H "  make SYNTH_PROJECT=<project> resynth"
	$H ""
	$H "Rerunning timing can be performed with"
	$H "  make SYNTH_PROJECT=<project> retime"

clean: clean_synth
.PHONY: clean_synth
clean_synth:
	rm -f $(MAKE_TARGETS)/synth.complete $(MAKE_TARGETS)/timing.complete $(MAKE_TARGETS)/fit.complete
	rm -rf $(QUARTUS_OUTPUT) $(QUARTUS_DB) $(QUARTUS_IDB)

.PHONY:synth fit timing
synth: $(MAKE_TARGETS)/synth.complete

fit: $(MAKE_TARGETS)/fit.complete

asm: $(MAKE_TARGETS)/asm.complete

timing: $(MAKE_TARGETS)/timing.complete

resynth:
	make clean_synth
	make synth

retime:
	rm -f $(MAKE_TARGETS)/timing.complete
	make timing

$(MAKE_TARGETS)/synth.complete: $(SCRIPTS_DIR)/synth.tcl
	(cd $(QUARTUS_DIR); $(QUARTUS_SH) -t $(SCRIPTS_DIR)/synth.tcl $(SYNTH_PROJECT) $(SYNTH_PROJECT)) && date > $(MAKE_TARGETS)/synth.complete

$(MAKE_TARGETS)/fit.complete: $(MAKE_TARGETS)/synth.complete
	(cd $(QUARTUS_DIR); $(QUARTUS_SH) -t $(SCRIPTS_DIR)/fit.tcl $(SYNTH_PROJECT) $(SYNTH_PROJECT)) && date > $(MAKE_TARGETS)/fit.complete

$(MAKE_TARGETS)/asm.complete: $(MAKE_TARGETS)/fit.complete
	(cd $(QUARTUS_DIR); $(QUARTUS_SH) -t $(SCRIPTS_DIR)/asm.tcl $(SYNTH_PROJECT) $(SYNTH_PROJECT)) && date > $(MAKE_TARGETS)/asm.complete

$(MAKE_TARGETS)/timing.complete: $(MAKE_TARGETS)/fit.complete
	(cd $(QUARTUS_DIR); $(QUARTUS_SH) -t $(SCRIPTS_DIR)/timing.tcl $(SYNTH_PROJECT) $(SYNTH_PROJECT)) && date > $(MAKE_TARGETS)/timing.complete

bbc_project_rebuild:
	(cd ../bbc_cdl; git pull; make clean verilog)
	(cp -r ../bbc_cdl/build/linux/*v verilog)

fpga_update_srams:
	(cd $(QUARTUS_DIR); $(QUARTUS_CDB) --update_mif $(SYNTH_PROJECT))

quartus_shell:
	$(QUARTUS_SH) -s

quartus_gui:
	(cd $(QUARTUS_DIR); $(QUARTUS_SH) -g)

netlist:
	(cd $(QUARTUS_DIR); $(QUARTUS_EDA) --read_settings_files=off --write_settings_files=off --simulation=on --tool=modelsim --format=verilog bbc_project -c bbc_project)

