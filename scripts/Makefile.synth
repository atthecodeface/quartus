CDL_HARDWARE   ?= $(ROOT)/../cdl_hardware

QUARTUS_DIR    ?= $(ROOT)/quartus
QUARTUS_OUTPUT ?= $(ROOT)/quartus_output
QUARTUS_DB     ?= $(ROOT)/quartus/db
QUARTUS_IDB    ?= $(ROOT)/quartus/incremental_db
PROJECTS_DIR   ?= ${QUARTUS_DIR}/projects

SCRIPT ?= script -ef

QUARTUS=$(ALTERA)/quartus
QUARTUS_BIN=$(QUARTUS)/bin
QUARTUS_SOPC_BUILDER=$(QUARTUS)/sopc_builder/bin/
QUARTUS_ENV ?= 
QUARTUS_ENV += SRAMS_DIR=$(SRAM_CONTENTS) RTL_DIR=$(RTL_DIR) VERILOG_DIR=$(VERILOG_DIR) QUARTUS_OUTPUT=$(QUARTUS_OUTPUT) QUARTUS_DIR=$(QUARTUS_DIR) 
QUARTUS_GENERATE =$(QUARTUS_ENV) $(QUARTUS_SOPC_BUILDER)/qsys-generate
QUARTUS_GENERATE_ARGS :=
QUARTUS_EXE =$(QUARTUS_ENV) $(QUARTUS_BIN)/quartus
QUARTUS_SH  =$(QUARTUS_ENV) $(QUARTUS_BIN)/quartus_sh
QUARTUS_STA =$(QUARTUS_ENV) $(QUARTUS_BIN)/quartus_sta
QUARTUS_CDB =$(QUARTUS_ENV) $(QUARTUS_BIN)/quartus_cdb
QUARTUS_EDA =$(QUARTUS_ENV) $(QUARTUS_BIN)/quartus_eda
QUARTUS_PGM =$(QUARTUS_ENV) $(QUARTUS_BIN)/quartus_pgm
QUARTUS_SOPC2DTS = $(QUARTUS_ENV)  $(QUARTUS_BIN)/sopc2dts
QUARTUS_JTAGD =sudo $(QUARTUS_ENV) $(QUARTUS_BIN)/jtagd
QUARTUS_JTAGCONFIG =$(QUARTUS_ENV) $(QUARTUS_BIN)/jtagconfig

PROJECT ?= de1_cl_hps/hps_fpga_debug 
PROJECT_ROOT := $(dir $(PROJECT))
PROJECT_LEAF := $(notdir $(PROJECT))
MAKE_PREFIX  := $(MAKE_TARGETS)/${PROJECT_LEAF}.completed
QUARTUS_PROJECT_DIR := $(PROJECTS_DIR)/$(PROJECT_ROOT)

QUARTUS_PROJECT_MAKEFILE := $(QUARTUS_PROJECT_DIR)$(PROJECT_LEAF).mk
QUARTUS_PROJECT_INCLUDE := $(shell if [ -f ${QUARTUS_PROJECT_MAKEFILE} ] ; then echo ${QUARTUS_PROJECT_MAKEFILE} ; else echo; fi;)

ifneq ($(QUARTUS_PROJECT_INCLUDE),)
-include ${QUARTUS_PROJECT_INCLUDE}
endif

help_synth:
	$H ""
	$H "****************************************************************"
	$H "Makefile.synth"
	$H "****************************************************************"
	$H ""
	$H "To pull and build verilog / roms in from the cdl_hardware directory"
	$H "  make rebuild_verilog"
	$H ""
	$H "To make quartus/modules contents when a qsys file changes or when"
	$H "the repo is first checked out:"
	$H "  make regenerate_modules"
	$H ""
	$H "Makefile.synth contains targets and recipes"
	$H "to enable synthesis, fitting and timing of"
	$H "FPGA builds using Altera Quartus"
	$H ""
	$H "The makefile support different 'project's using the same tree"
	$H "The project name is specified with 'PROJECT'"
	$H "PROJECT defaults to 'bbc_project'"
	$H ""
	$H "The first step is synthesis (mapping):"
	$H "  make PROJECT=<project> synth"
	$H ""
	$H "The second step is fitting:"
	$H "  make PROJECT=<project> fit"
	$H ""
	$H "The third step is timing analysis:"
	$H "  make PROJECT=<project> timing"
	$H ""
	$H "After fitting (or timing, indeed) the SRAM's making an"
	$H "image may be updated with"
	$H "  make PROJECT=<project> fpga_update_srams"
	$H ""
	$H "A resynthesis can be performed with"
	$H "  make PROJECT=<project> resynth"
	$H ""
	$H "Rerunning timing can be performed with"
	$H "  make PROJECT=<project> retime"
	$H ""
	$H " make PROJECT=de1_cl_hps/hps_fpga_debug all_sram resynth pins fit timing"
	$H " make PROJECT=de1_cl_hps/hps_fpga_debug all_sram fpga_update_srams"
	$H " make PROJECT=de1_cl_hps/hps_fpga_debug jtag_program"
	$H ""

clean: clean_synth
.PHONY: clean_synth
clean_synth:
	rm -f ${MAKE_PREFIX}.*
	rm -rf $(QUARTUS_OUTPUT) $(QUARTUS_DB) $(QUARTUS_IDB)
	mkdir -p $(QUARTUS_OUTPUT) $(MAKE_TARGETS)

.PHONY:synth
.PHONY:asm
.PHONY:fit
.PHONY:timing
synth:  ${MAKE_PREFIX}.synth
fit:    ${MAKE_PREFIX}.fit
timing: ${MAKE_PREFIX}.timing
asm:    ${MAKE_PREFIX}.asm

force_asm:
	rm -f ${MAKE_PREFIX}.asm
	make asm

resynth:
	make clean_synth
	make synth

refit:
	rm -f ${MAKE_PREFIX}.fit ${MAKE_PREFIX}.timing ${MAKE_PREFIX}.asm
	make fit

retime:
	rm -f ${MAKE_PREFIX}.timing
	make timing

edit:
	(cd $(QUARTUS_PROJECT_DIR); $(QUARTUS_EXE) $(PROJECT_LEAF) $(PROJECT_LEAF))

dts : $(PROJECT).dts
# _board_info.xml hps_clock_info.xml

%.dts %.sopcinfo:
	$(QUARTUS_SOPC2DTS) --input $< --output $@
# --board _board_info.xml --board hps_clock_info.xml

%.dtb: %.dts
	$(DTS.DTC) -I dts -O dtb -o $@ $<

pins:
	${SCRIPT} -c '(cd $(QUARTUS_PROJECT_DIR); $(QUARTUS_STA) -t $(QUARTUS_DIR)/modules/hps/synthesis/submodules/hps_sdram_p0_pin_assignments.tcl $(PROJECT_LEAF))' $(QUARTUS_OUTPUT)/pins.log

regenerate_modules: $(QUARTUS_DIR)/modules/regenerate_date

$(QUARTUS_DIR)/modules/regenerate_date: $(QUARTUS_DIR)/modules/hps.qsys $(QUARTUS_DIR)/modules/altclkctrl.qsys
	(cd $(QUARTUS_DIR)/modules; $(QUARTUS_GENERATE) hps.qsys --synthesis=VERILOG $(QUARTUS_GENERATE_ARGS) )
	(cd $(QUARTUS_DIR)/modules; $(QUARTUS_GENERATE) altclkctrl.qsys --synthesis=VERILOG $(QUARTUS_GENERATE_ARGS) )
	date >> $(QUARTUS_DIR)/modules/regenerate_date

${MAKE_PREFIX}.synth: $(SCRIPTS_DIR)/synth.tcl
	${SCRIPT} -c '(cd $(QUARTUS_PROJECT_DIR); $(QUARTUS_SH) -t $(SCRIPTS_DIR)/synth.tcl $(PROJECT_LEAF) $(PROJECT_LEAF) )' $(QUARTUS_OUTPUT)/synth.log  && date > ${MAKE_PREFIX}.synth

${MAKE_PREFIX}.fit: ${MAKE_PREFIX}.synth
	${SCRIPT} -c '(cd $(QUARTUS_PROJECT_DIR); $(QUARTUS_SH) -t $(SCRIPTS_DIR)/fit.tcl $(PROJECT_LEAF) $(PROJECT_LEAF))' $(QUARTUS_OUTPUT)/fit.log       && date > ${MAKE_PREFIX}.fit

${MAKE_PREFIX}.asm: ${MAKE_PREFIX}.fit
	${SCRIPT} -c '(cd $(QUARTUS_PROJECT_DIR); $(QUARTUS_SH) -t $(SCRIPTS_DIR)/asm.tcl $(PROJECT_LEAF) $(PROJECT_LEAF))' $(QUARTUS_OUTPUT)/asm.log       && date > ${MAKE_PREFIX}.asm

${MAKE_PREFIX}.timing: ${MAKE_PREFIX}.fit
	${SCRIPT} -c '(cd $(QUARTUS_PROJECT_DIR); $(QUARTUS_SH) -t $(SCRIPTS_DIR)/timing.tcl $(PROJECT_LEAF) $(PROJECT_LEAF))' $(QUARTUS_OUTPUT)/timing.log && date > ${MAKE_PREFIX}.timing

rebuild_verilog:
	(cd $(CDL_HARDWARE); git pull && make clean && make -j6 verilog)
	(cp -r $(CDL_HARDWARE)/build/linux/*v verilog)
	(cd $(CDL_HARDWARE); make roms)
	(cp -r $(CDL_HARDWARE)/roms/*mif mif)

fpga_update_srams:
	${SCRIPT} -c '(cd $(QUARTUS_PROJECT_DIR); $(QUARTUS_CDB) --update_mif $(PROJECT_LEAF)) ' $(QUARTUS_OUTPUT)/fpga_update_srams.log       && date > ${MAKE_PREFIX}.fpga_update_srams
	(make force_asm)

quartus_shell:
	cd $(QUARTUS_PROJECT_DIR); $(QUARTUS_SH) -s
	#$(PROJECT_LEAF) $(PROJECT_LEAF)

quartus_gui:
	cd $(QUARTUS_PROJECT_DIR); $(QUARTUS_SH) -g

netlist:
	(cd $(QUARTUS_DIR); $(QUARTUS_EDA) --read_settings_files=off --write_settings_files=off --simulation=on --tool=modelsim --format=verilog $(PROJECT_LEAF) -c $(PROJECT_LEAF))

jtag_program:
	( cable_name=`ALTERA_BIN=/altera/quartus/bin $(SCRIPTS_DIR)/find_altera_cable.sh` ; \
	  echo "Using cable '$$cable_name'" ; \
	 $(QUARTUS_PGM) -m jtag --cable="$$cable_name" -o "P;quartus_output/$(PROJECT_LEAF).sof@2" )

jtag_usb_init:
	ALTERA_BIN=/altera/quartus/bin bash -c "source $(SCRIPTS_DIR)/find_altera_cable.sh"
