VIVADO_DIR          ?= $(ROOT)/vivado
VIVADO_OUTPUT       ?= $(ROOT)/vivado_output
VIVADO_SCRIPTS_DIR  ?= $(VIVADO_DIR)/scripts

VIVADO         := /xilinx/Vivado/2019.1
VIVADO_BIN     := ${VIVADO}/bin
VIVADO_OPTS    :=  -journal ${VIVADO_OUTPUT}/vivado.journal -log ${VIVADO_OUTPUT}/vivado.log 
VIVADO_ENV ?= 
VIVADO_ENV += SRAMS_DIR=$(SRAM_CONTENTS) RTL_DIR=$(RTL_DIR) VERILOG_DIR=$(VERILOG_DIR) VIVADO_OUTPUT=$(VIVADO_OUTPUT) VIVADO_DIR=$(VIVADO_DIR)  VIVADO_SCRIPTS_DIR=$(VIVADO_SCRIPTS_DIR) 

VIVADO_EXE = $(VIVADO_ENV) $(VIVADO_BIN)/vivado $(VIVADO_OPTS)
VIVADO_HWSERVER =sudo $(VIVADO_ENV) $(VIVADO_BIN)/hw_server

help_vivado:
	$H "****************************************************************"
	$H "Makefile.vivado"
	$H "****************************************************************"
	$H ""
	$H "Makefile.vivado contains targets and recipes"
	$H "to enable synthesis, fitting and timing of"
	$H "FPGA builds using Xilinx Vivado"
	$H ""
	$H "The makefile support different 'project's using the same tree"
	$H "The project name is specified with 'PROJECT'"
	$H ""
	$H "To update the verilog as required by Vivado for a project:"
	$H "  make vivado_parametrize"
	$H ""
	$H "The steps required for a complete Vivado build from correct verilog"
	$H "are place, route, report and bitstream."
	$H "The place step reads in all the verilog and constraints and performs a placement."
	$H "The design is then saved of ready for routing."
	$H "As Vivado does not support parameter setting from a script the verilog has to be"
	$H "modified to contain the correct filenames for initial RAM/ROM filling. Modules may"
	$H "also have to be uniqified for a design, and module instances replaced with either"
	$H "unique versions or technology-specific versions. Hence the parametrizing step which"
	$H "must be performed prior to placement."
	$H "Routing use the constraints and placed design to produce a route that meets timing, and saves a new design."
	$H "Report produces various reports from the routed design."
	$H "Bitstream produces a bit file that can be downloaded to an FPGA."
	$H ""
	$H "The simplest approach is to use "
	$H "  make PROJECT=<project> vivado_report vivado_bitstream"
	$H ""

clean: vivado_clean

.PHONY: vivdo_clean
vivado_clean: clean_make
	rm -f $(VIVADO_OUTPUT)/*$(PROJECT_LEAF)*
	rm -f $(VIVADO_OUTPUT)/vivado*log $(VIVADO_OUTPUT)/vivado*journal
	mkdir -p $(VIVADO_OUTPUT)

.PHONY:vivado_place
.PHONY:vivado_route
.PHONY:vivado_report
.PHONY:vivado_bitstream
.PHONY:vivado_parametrize
vivado_parametrize:  ${MAKE_PREFIX}.vivado_parametrize
vivado_place:  ${MAKE_PREFIX}.vivado_place
vivado_route:  ${MAKE_PREFIX}.vivado_route
vivado_report: ${MAKE_PREFIX}.vivado_report
vivado_bitstream: ${MAKE_PREFIX}.vivado_bitstream

${MAKE_PREFIX}.vivado_parametrize:
	date > ${MAKE_PREFIX}.vivado_parametrize

${MAKE_PREFIX}.vivado_place: ${MAKE_PREFIX}.vivado_parametrize
	${SCRIPT} -c '(cd $(PROJECT_DIR); $(VIVADO_EXE) -mode batch -source $(VIVADO_SCRIPTS_DIR)/place.tcl -tclargs $(PROJECT_LEAF) )' $(VIVADO_OUTPUT)/$(PROJECT_LEAF).place.log  && date > ${MAKE_PREFIX}.vivado_place

${MAKE_PREFIX}.vivado_route: ${MAKE_PREFIX}.vivado_place
	${SCRIPT} -c '(cd $(PROJECT_DIR); $(VIVADO_EXE) -mode batch -source $(VIVADO_SCRIPTS_DIR)/route.tcl -tclargs $(PROJECT_LEAF) )' $(VIVADO_OUTPUT)/$(PROJECT_LEAF).route.log  && date > ${MAKE_PREFIX}.vivado_route

${MAKE_PREFIX}.vivado_report: ${MAKE_PREFIX}.vivado_route
	${SCRIPT} -c '(cd $(PROJECT_DIR); $(VIVADO_EXE) -mode batch -source $(VIVADO_SCRIPTS_DIR)/report.tcl -tclargs $(PROJECT_LEAF) )' $(VIVADO_OUTPUT)/$(PROJECT_LEAF).report.log  && date > ${MAKE_PREFIX}.vivado_report

${MAKE_PREFIX}.vivado_bitstream: ${MAKE_PREFIX}.vivado_route
	${SCRIPT} -c '(cd $(PROJECT_DIR); $(VIVADO_EXE) -mode batch -source $(VIVADO_SCRIPTS_DIR)/bitstream.tcl -tclargs $(PROJECT_LEAF) )' $(VIVADO_OUTPUT)/$(PROJECT_LEAF).bitstream.log  && date > ${MAKE_PREFIX}.vivado_bitstream
	cp $(VIVADO_OUTPUT)/$(PROJECT_LEAF).bit ${GOLDEN_BIT}/$(PROJECT_LEAF).`date +%y%m%d-%H%M%S`.bit

GOLDEN_BIT ?= golden_bit
# GOLDEN_BIT ?= /vm_shared/vm_read_only
LATEST_MMI_FILE = `ls -t ${GOLDEN_BIT}/*mmi | head -1`
LATEST_BIT_FILE = `ls -t ${GOLDEN_BIT}/*bit | head -1`
vivado_update_bit:
	${MAKE} MMI_FILE=${LATEST_MMI_FILE} BIT_FILE=${LATEST_BIT_FILE} update_bootrom

vivado_program:
	BIT_FILE=vivado_output/reprogrammed.bit  ${VIVADO_EXE} -mode batch -source ${VIVADO_SCRIPTS_DIR}/program.tcl

.PHONY:vivado_tcl
vivado_tcl:
	(cd $(PROJECT_DIR); $(VIVADO_EXE) -mode tcl -tclargs $(PROJECT_LEAF) )


.PHONY: vivado_srams
vivado_srams:
	$(VIVADO_SCRIPTS_DIR)/make_srams.py > rtl/srw_srams.v

